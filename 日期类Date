#include <iostream>
using namespace std;

class Date
{
private:
    int _year;
    int _month;
    int _day;
public:
    //获取给定月的天数
    int GetMonthDay(int year,int month)
    {
        int monthDays[13] = {0,31,28,31,30,31,30,31,31,30,31,30,31};
        //是2月且是闰年
        if(month ==2 && (year%4==0 && year%100 != 0) || year%400 == 0)
        {
            return 29;
        }

        return monthDays[month];
    }
    //构造函数
    Date(int year = 0,int month = 1,int day = 1)
    {
        if(year >= 0 && month > 0 && month <= 12
        && day > 0 && day <= GetMonthDay(year,month))
        {
            _year = year;
            _month = month;
            _day = day;
        }
        else
        {
            cout << "非法输入" << endl;
        }
    }
    //拷贝构造
    Date(const Date& d)
    {
        _year = d._year;
        _month = d._month;
        _day = d._day;
    }
    //操作符重载函数,
    /********比较运算符*********/
    //小于
    bool operator<(const Date& d)// bool operator<(Date* this,const Date& d)
    {
        if(_year < d._year)
            return true;
        else if(_year == d._year && _month < d._month)
            return true;
        else if(_year == d._year && _month == d._month && _day < d._day)
            return true;
        
        return false;
    }
    //等于
    bool operator==(const Date& d)
    {
        return  _year == d._year && _month == d._month && _day == d._day;
    }
    //小于等于
    bool operator<=(const Date& d)
    {
        return *this < d || *this == d;//复用上面的两个函数
    }
    //大于  
    bool operator>(const Date& d)
    {
        return !(*this <= d);
    }
    //大于等于  
    bool operator>=(const Date& d)
    {
        return !(*this < d);
    }
    //不等于 d1 > d2
    bool operator!=(const Date& d)
    {
        return !(*this == d);
    }
    /********运算符*********/
    //加法 d1 + 100 
    Date operator+(int day)
    {
        Date ret(*this);
        ret._day += day;
        while(ret._day > GetMonthDay(ret._year,ret._month))
        {
            ret._day -= GetMonthDay(ret._year,ret._month);
            ret._month++;
            if(ret._month == 13)
            {
                ret._year++;
                ret._month = 1;
            }
        }

        return ret;
    }
    // d1 += 10
    Date operator+=(int day)
    {
        _day += day;
        while(_day > GetMonthDay(_year,_month))
        {
            _day -= GetMonthDay(_year,_month);
            _month++;
            if(_month == 13)
            {
                _year ++;
                _month = 1;
            }
        }
        return *this;
    }
    //打印函数
    void Print()
    {
        cout << _year << '/' << _month << '/' << _day << endl;
    }
};

int main()
{
    Date d1(2022,12,4);
    d1.Print();

    Date d2(2022,12,13);
    d2 += 20;
    d2.Print();

    cout << (d1 > d2) << endl;
    cout << (d1 >= d2) << endl;
    cout << (d1 != d2) << endl;
    cout << (d1 == d2) << endl;
    cout << (d1 <= d2) << endl;
    cout << (d1 < d2) << endl;

    Date d3 = d1 + 30;
    d3.Print();

    return 0;
}
